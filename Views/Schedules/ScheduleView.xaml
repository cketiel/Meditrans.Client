<UserControl x:Class="Meditrans.Client.Views.Schedules.ScheduleView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Meditrans.Client.Views.Schedules"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converters="clr-namespace:Meditrans.Client.Converters"
             xmlns:helpers="clr-namespace:Meditrans.Client.Helpers"  
             xmlns:models="clr-namespace:Meditrans.Client.Models"
             xmlns:gmaps="clr-namespace:GMap.NET.WindowsPresentation;assembly=GMap.NET.WindowsPresentation"
             xmlns:gong="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
             mc:Ignorable="d" 
             xmlns:vm="clr-namespace:Meditrans.Client.ViewModels"
             
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <converters:EtaViolationConverter x:Key="EtaViolationConverter"/>
        <converters:LocationToPointConverter x:Key="LocationToPointConverter"/>
        <converters:ColumnVisibilityConverter x:Key="ColumnVisibilityConverter"/>
        <helpers:BindingProxy x:Key="vmProxy" Data="{Binding}" />
    </UserControl.Resources>

    <Border BorderThickness="1,1,1,1" BorderBrush="{StaticResource MainBorderBrush}">
        <Grid Margin="4 0 4 4">
        <Grid.RowDefinitions>

            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="5"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>


        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5">
            <DatePicker SelectedDate="{Binding SelectedDate}" Margin="5"/>
            <ComboBox ItemsSource="{Binding VehicleRoutes}" SelectedItem="{Binding SelectedVehicleRoute}" DisplayMemberPath="Name" Width="200" Margin="5"/>
            <ComboBox ItemsSource="{Binding VehicleGroups}" DisplayMemberPath="Name" Width="200" Margin="5"/>
        </StackPanel>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>


            <DockPanel Grid.Column="0">
                <!-- Schedule Grid -->
                <ScrollViewer HorizontalScrollBarVisibility="Visible" >
                    <DataGrid 
                        ItemsSource="{Binding Schedules}"
                        SelectedItem="{Binding SelectedSchedule, Mode=TwoWay}" 
                        AutoGenerateColumns="False" CanUserAddRows="False" 
                        SelectionMode="Single" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" 
                        FrozenColumnCount="2" IsReadOnly="True" 
                        AlternationCount="2" AlternatingRowBackground="White" 
                        Style="{StaticResource CustomDataGridStyle}" ColumnHeaderStyle="{StaticResource CustomColumnHeaderStyle}" 
                        
                        CellStyle="{StaticResource CustomCellStyle}" 
                        SelectionUnit="FullRow"
                        gong:DragDrop.IsDragSource="True"
                        gong:DragDrop.IsDropTarget="True"
                        gong:DragDrop.DropHandler="{Binding}">

                        <DataGrid.RowStyle>
                            <!-- Nos basamos en tu estilo de fila personalizado para no perderlo -->
                            <Style TargetType="DataGridRow" BasedOn="{StaticResource CustomRowStyle}">
                                <Style.Triggers>
                                    <!-- Este es el disparador para la violación de tiempo -->
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <!-- El MultiBinding pasará los 4 valores a nuestro convertidor -->
                                            <MultiBinding Converter="{StaticResource EtaViolationConverter}">
                                                <Binding Path="EventType" />
                                                <Binding Path="ETA" />
                                                <Binding Path="Pickup" />
                                                <Binding Path="Appt" />
                                            </MultiBinding>
                                        </DataTrigger.Binding>

                                        <!-- Cuando el convertidor devuelve True, se aplican estos Setters -->
                                        <Setter Property="Background" Value="#FFFAA0A0" />
                                        <!-- Un rojo claro -->
                                        <Setter Property="Foreground" Value="Black" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.RowStyle>

                        <DataGrid.Columns>

                            <DataGridTemplateColumn Width="Auto">

                                <DataGridTemplateColumn.HeaderTemplate>
                                    <DataTemplate>
                                        <Button Command="{Binding DataContext.OpenColumnSelectorCommand,
                                        RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        Style="{StaticResource MaterialDesignToolButton}"
                                        ToolTip="{Binding Data.SelectFieldsToDisplayToolTip, Source={StaticResource vmProxy}}">
                                            <materialDesign:PackIcon Kind="Cog" Width="20" Height="20"/>
                                        </Button>
                                    </DataTemplate>
                                </DataGridTemplateColumn.HeaderTemplate>

                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Command="{Binding Data.CancelRouteCommand, Source={StaticResource vmProxy}}"
                                        
                                        VerticalAlignment="Center"
                                        ToolTip="{Binding Data.UnscheduleToolTip, Source={StaticResource vmProxy}}">

                                            <Button.Style>
                                                <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignToolButton}">
                                                    <Style.Triggers>
                                                        <!-- Trigger to disable if name is "Pull-out" -->
                                                        <DataTrigger Binding="{Binding Name}" Value="Pull-out">
                                                            <Setter Property="IsEnabled" Value="False" />
                                                        </DataTrigger>

                                                        <!-- Trigger to disable if name is "Pull-in" -->
                                                        <DataTrigger Binding="{Binding Name}" Value="Pull-in">
                                                            <Setter Property="IsEnabled" Value="False" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>

                                            <materialDesign:PackIcon Kind="SortClockAscendingOutline" Width="20" Height="20" Foreground="{DynamicResource MaterialDesign.Brush.Primary}" />
                                            <!-- ArrowURightBottomBold -->
                                        </Button>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>

                            </DataGridTemplateColumn>

                            <DataGridTextColumn Binding="{Binding Name}" Width="250" IsReadOnly="True" 
                                        Header="{Binding Data.ColumnHeaderName, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Name}"/>

                            <DataGridTextColumn Binding="{Binding Pickup, StringFormat=\{0:hh\\:mm\}}" Width="80"
                                        Header="{Binding Data.ColumnHeaderPickup, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Pickup}"/>
                            <DataGridTextColumn Binding="{Binding Appt, StringFormat=\{0:hh\\:mm\}}" Width="80"
                                        Header="{Binding Data.ColumnHeaderAppt, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Appt}"/>
                            <DataGridTextColumn Binding="{Binding ETA, StringFormat=\{0:hh\\:mm\}}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderETA, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=ETA}"/>

                            <DataGridTemplateColumn Width="25" IsReadOnly="True">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>

                                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">

                                            <!-- The Border that changes from circle to square -->
                                            <Border Width="20" Height="20" ToolTip="{Binding Name}">
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <!-- Default status: Gray circle -->
                                                        <Setter Property="CornerRadius" Value="10"/>
                                                        <Setter Property="Background" Value="Gray"/>
                                                        <Style.Triggers>
                                                            <!-- Triggers for NOT selected status colors -->
                                                            <DataTrigger Binding="{Binding Name}" Value="Pull-out">
                                                                <Setter Property="Background" Value="Green"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Name}" Value="Pull-in">
                                                                <Setter Property="Background" Value="Red"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Pickup}">
                                                                <Setter Property="Background" Value="Green"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Dropoff}">
                                                                <Setter Property="Background" Value="Red"/>
                                                            </DataTrigger>

                                                            <!-- Triggers for the SELECTED state -->
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                                    <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Pickup}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" Value="Black"/>
                                                                <Setter Property="CornerRadius" Value="2"/>

                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                                    <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Dropoff}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Background" Value="Black"/>
                                                                <Setter Property="CornerRadius" Value="2"/>

                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>


                                                <ContentControl Content="{Binding}">
                                                    <ContentControl.Resources>
                                                        <!-- Templates for each visual state -->
                                                        <DataTemplate x:Key="SequenceTemplate">
                                                            <TextBlock Text="{Binding Sequence}" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </DataTemplate>
                                                        <DataTemplate x:Key="CarTemplate">
                                                            <materialDesign:PackIcon Kind="Car" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18"/>
                                                        </DataTemplate>
                                                        <DataTemplate x:Key="SelectedPickupTemplate">
                                                            <materialDesign:PackIcon Kind="ArrowTopRight" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </DataTemplate>
                                                        <DataTemplate x:Key="SelectedDropoffTemplate">
                                                            <materialDesign:PackIcon Kind="ArrowBottomRight" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </DataTemplate>
                                                    </ContentControl.Resources>

                                                    <ContentControl.Style>
                                                        <Style TargetType="ContentControl">
                                                            <!-- By default, it shows the number -->
                                                            <Setter Property="ContentTemplate" Value="{StaticResource SequenceTemplate}"/>
                                                            <Style.Triggers>
                                                                <!-- Triggers to change the template -->
                                                                <DataTrigger Binding="{Binding Name}" Value="Pull-out">
                                                                    <Setter Property="ContentTemplate" Value="{StaticResource CarTemplate}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Name}" Value="Pull-in">
                                                                    <Setter Property="ContentTemplate" Value="{StaticResource CarTemplate}"/>
                                                                </DataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                                        <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Pickup}"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="ContentTemplate" Value="{StaticResource SelectedPickupTemplate}"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                                        <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Dropoff}"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="ContentTemplate" Value="{StaticResource SelectedDropoffTemplate}"/>
                                                                </MultiDataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </ContentControl.Style>
                                                </ContentControl>
                                            </Border>
                                        </Grid>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <DataGridTextColumn Binding="{Binding Distance}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderDistance, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Distance}"/>
                            <DataGridTextColumn Binding="{Binding Travel}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderTravel, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Travel}"/>
                            <DataGridTextColumn Binding="{Binding On}" Width="50" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderOn, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=On}"/>
                            <DataGridTextColumn Binding="{Binding SpaceType}" Width="80"
                                        Header="{Binding Data.ColumnHeaderSpace, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=SpaceTypeName}"/>
                            <DataGridTextColumn Binding="{Binding Address}" Width="250"
                                        Header="{Binding Data.ColumnHeaderAddress, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Address}"/>

                            <DataGridTextColumn Binding="{Binding Comment}" Width="200" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderComment, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Comment}"/>
                            <DataGridTextColumn Binding="{Binding Phone}" Width="120" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderPhone, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Phone}"/>
                            <DataGridTextColumn Binding="{Binding Arrive, StringFormat=\{0:hh\\:mm\}}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderArrive, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Arrive}"/>
                            <DataGridTextColumn Binding="{Binding Perform, StringFormat=\{0:hh\\:mm\}}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderPerform, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Perform}"/>
                            <DataGridTextColumn Binding="{Binding ArriveDist}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderArriveDist, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=ArriveDist}"/>
                            <DataGridTextColumn Binding="{Binding PerformDist}" Width="80" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderPerformDist, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=PerformDist}"/>
                            <DataGridTextColumn Binding="{Binding Driver}" Width="150" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderDriver, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Driver}"/>
                            <DataGridTextColumn Binding="{Binding GPSArrive}" Width="120" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderGPSArrive, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=GPSArrive}"/>
                            <DataGridTextColumn Binding="{Binding Odometer}" Width="100" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderOdometer, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=Odometer}"/>
                            <DataGridTextColumn Binding="{Binding AuthNo}" Width="120" IsReadOnly="True"
                                        Header="{Binding Data.ColumnHeaderAuthNo, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=AuthNo}"/>

                            <DataGridTextColumn Binding="{Binding FundingSource}"
                                        Header="{Binding Data.ColumnHeaderFundingSource, Source={StaticResource vmProxy}}"
                                        Visibility="{Binding Data.ColumnConfigurations, Source={StaticResource vmProxy}, Converter={StaticResource ColumnVisibilityConverter}, ConverterParameter=FundingSource}"/>
                        </DataGrid.Columns>

                    </DataGrid>
                </ScrollViewer>
            </DockPanel>

            <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightGray" ShowsPreview="True"/>

            <!-- Column 2: Map Area -->
            <Grid Grid.Column="2" Margin="5">

                <gmaps:GMapControl x:Name="MapView" MinZoom="2" MaxZoom="20"
                                   Zoom="{Binding MapZoom, Mode=TwoWay}"
                                   Position="{Binding MapCenter, Mode=TwoWay}"/>


                <ItemsControl ItemsSource="{Binding Schedules}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left">
                                <Setter.Value>

                                    <MultiBinding Converter="{StaticResource LocationToPointConverter}">
                                        <Binding ElementName="MapView"/>
                                        <Binding Path="ScheduleLatitude"/>
                                        <Binding Path="ScheduleLongitude"/>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="Zoom" ElementName="MapView"/>
                                        <Binding Path="Position" ElementName="MapView"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Canvas.Top">
                                <Setter.Value>

                                    <MultiBinding Converter="{StaticResource LocationToPointConverter}" ConverterParameter="Y">
                                        <Binding ElementName="MapView"/>
                                        <Binding Path="ScheduleLatitude"/>
                                        <Binding Path="ScheduleLongitude"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="Zoom" ElementName="MapView"/>
                                        <Binding Path="Position" ElementName="MapView"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ItemsControl.ItemContainerStyle>

                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid>

                                <Border Width="20" Height="20" ToolTip="{Binding Name}"
                                        MouseLeftButtonDown="ScheduleMarker_MouseLeftButtonDown"
                                        Cursor="Hand">

                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="CornerRadius" Value="12"/>
                                            <Setter Property="Background" Value="Gray"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Name}" Value="Pull-out">
                                                    <Setter Property="Background" Value="Green"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Name}" Value="Pull-in">
                                                    <Setter Property="Background" Value="Red"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Pickup}">
                                                    <Setter Property="Background" Value="Green"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Dropoff}">
                                                    <Setter Property="Background" Value="Red"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                        <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Pickup}"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="Black"/>
                                                    <Setter Property="CornerRadius" Value="2"/>
                                                    <Setter Property="Width" Value="18"/>
                                                    <Setter Property="Height" Value="18"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                        <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Dropoff}"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="Black"/>
                                                    <Setter Property="CornerRadius" Value="2"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>


                                    <ContentControl Content="{Binding}">
                                        <ContentControl.Resources>
                                            <!-- Template for default state (sequence number)-->
                                            <DataTemplate x:Key="SequenceTemplate">
                                                <TextBlock Text="{Binding Sequence}" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </DataTemplate>

                                            <!-- Pull-in/Pull-out template (car icon)-->
                                            <DataTemplate x:Key="CarTemplate">
                                                <materialDesign:PackIcon Kind="Car" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </DataTemplate>

                                            <!-- Template for Selected Pickup (upper right arrow) -->
                                            <DataTemplate x:Key="SelectedPickupTemplate">
                                                <materialDesign:PackIcon Kind="ArrowTopRight" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </DataTemplate>

                                            <!-- Template for Selected Dropoff (bottom right arrow) -->
                                            <DataTemplate x:Key="SelectedDropoffTemplate">
                                                <materialDesign:PackIcon Kind="ArrowBottomRight" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </DataTemplate>
                                        </ContentControl.Resources>

                                        <ContentControl.Style>
                                            <Style TargetType="ContentControl">
                                                <!-- The default state is to show the sequence number -->
                                                <Setter Property="ContentTemplate" Value="{StaticResource SequenceTemplate}"/>
                                                <Style.Triggers>
                                                    <!-- Trigger to show the car -->
                                                    <DataTrigger Binding="{Binding Name}" Value="Pull-out">
                                                        <Setter Property="ContentTemplate" Value="{StaticResource CarTemplate}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Name}" Value="Pull-in">
                                                        <Setter Property="ContentTemplate" Value="{StaticResource CarTemplate}"/>
                                                    </DataTrigger>

                                                    <!-- Trigger to show Pickup selected arrow -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                            <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Pickup}"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="ContentTemplate" Value="{StaticResource SelectedPickupTemplate}"/>
                                                    </MultiDataTrigger>

                                                    <!-- Trigger to show selected Dropoff arrow -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsSelectedForMap}" Value="True"/>
                                                            <Condition Binding="{Binding EventType}" Value="{x:Static models:ScheduleEventType.Dropoff}"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="ContentTemplate" Value="{StaticResource SelectedDropoffTemplate}"/>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>


                                </Border>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>

                </ItemsControl>


                <ItemsControl ItemsSource="{Binding SelectedUnscheduledTripPoints}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left">
                                <Setter.Value>

                                    <MultiBinding Converter="{StaticResource LocationToPointConverter}">
                                        <Binding ElementName="MapView"/>
                                        <Binding Path="Latitude"/>
                                        <Binding Path="Longitude"/>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="Zoom" ElementName="MapView"/>
                                        <Binding Path="Position" ElementName="MapView"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Canvas.Top">
                                <Setter.Value>

                                    <MultiBinding Converter="{StaticResource LocationToPointConverter}" ConverterParameter="Y">
                                        <Binding ElementName="MapView"/>
                                        <Binding Path="Latitude"/>
                                        <Binding Path="Longitude"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="Zoom" ElementName="MapView"/>
                                        <Binding Path="Position" ElementName="MapView"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Border Width="18" Height="18" Background="Black" CornerRadius="2">
                                <materialDesign:PackIcon Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <materialDesign:PackIcon.Style>
                                        <Style TargetType="materialDesign:PackIcon">
                                            <Setter Property="Kind" Value="ArrowUp"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Type}" Value="Dropoff">
                                                    <Setter Property="Kind" Value="ArrowDown"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </materialDesign:PackIcon.Style>
                                </materialDesign:PackIcon>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </Grid>

        <GridSplitter Grid.Row="2" Height="5" HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="LightGray" ShowsPreview="True"/>


        <DataGrid Grid.Row="3" ItemsSource="{Binding UnscheduledTrips}" SelectedItem="{Binding SelectedUnscheduledTrip}" SelectionMode="Single" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" FrozenColumnCount="2" IsReadOnly="True" AlternationCount="2" AlternatingRowBackground="White" Style="{StaticResource CustomDataGridStyle}" ColumnHeaderStyle="{StaticResource CustomColumnHeaderStyle}" RowStyle="{StaticResource CustomRowStyle}" CellStyle="{StaticResource CustomCellStyle}" SelectionUnit="FullRow" AutoGenerateColumns="False" CanUserAddRows="False" Cursor="Hand">

            <DataGrid.Columns>

                <DataGridTemplateColumn Width="Auto">

                    <!--<DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <Button Command="{Binding DataContext.OpenTripColumnSelectorCommand,
                                    RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    Style="{StaticResource MaterialDesignToolButton}"
                                    >   
                                <materialDesign:PackIcon Kind="Cog" Width="20" Height="20"/>
                            </Button>
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>-->

                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">

                                <Button Command="{Binding Data.CancelTripCommand, Source={StaticResource vmProxy}}"
                                        Style="{StaticResource MaterialDesignToolButton}"
                                        VerticalAlignment="Center"
                                        ToolTip="{Binding Data.CancelTripToolTip, Source={StaticResource vmProxy}}">
                                    <materialDesign:PackIcon Kind="CloseThick" Foreground="Red" Width="20" Height="20" />
                                </Button>

                                <Button Command="{Binding DataContext.EditCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource MaterialDesignToolButton}"
                                        ToolTip="{Binding Data.EditTripToolTip, Source={StaticResource vmProxy}}">
                                    <materialDesign:PackIcon Kind="FileEdit" Foreground="Orange"/>
                                </Button>

                                <Button Command="{Binding DataContext.RouteTripCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                        CommandParameter="{Binding}"
                                        Style="{StaticResource MaterialDesignToolButton}"
                                        ToolTip="{Binding Data.ScheduleTripToolTip, Source={StaticResource vmProxy}}">
                                    <materialDesign:PackIcon Kind="SortClockDescending" Foreground="Green"/>
                                </Button>

                            </StackPanel>

                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>

                </DataGridTemplateColumn>

                <DataGridTextColumn Binding="{Binding Date}"
                Header="{Binding Data.ColumnHeaderDate, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding FromTime}"
                Header="{Binding Data.ColumnHeaderFromTime, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding ToTime}"
                Header="{Binding Data.ColumnHeaderToTime, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding NotificationStatus}"
                Header="{Binding Data.ColumnHeaderNotificationStatus, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding CustomerName}"
                Header="{Binding Data.ColumnHeaderPatient, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding PickupAddress}"
                Header="{Binding Data.ColumnHeaderPickupAddress, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding DropoffAddress}"
                Header="{Binding Data.ColumnHeaderDropoffAddress, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Charge}"
                Header="{Binding Data.ColumnHeaderCharge, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Paid}"
                Header="{Binding Data.ColumnHeaderPaid, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding SpaceType}"
                Header="{Binding Data.ColumnHeaderSpace, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding PickupComment}"
                Header="{Binding Data.ColumnHeaderPickupComment, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding DropoffComment}"
                Header="{Binding Data.ColumnHeaderDropoffComment, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Type}"
                Header="{Binding Data.ColumnHeaderType, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Pickup}"
                Header="{Binding Data.ColumnHeaderPickup, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Dropoff}"
                Header="{Binding Data.ColumnHeaderDropoff, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding PickupPhone}"
                Header="{Binding Data.ColumnHeaderPickupPhone, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding DropoffPhone}"
                Header="{Binding Data.ColumnHeaderDropoffPhone, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Authorization}"
                Header="{Binding Data.ColumnHeaderAuthorization, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding FundingSource}"
                Header="{Binding Data.ColumnHeaderFundingSource, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding Distance}"
                Header="{Binding Data.ColumnHeaderDistance, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding PickupCity}"
                Header="{Binding Data.ColumnHeaderPickupCity, Source={StaticResource vmProxy}}"/>

                <DataGridTextColumn Binding="{Binding DropoffCity}"
                Header="{Binding Data.ColumnHeaderDropoffCity, Source={StaticResource vmProxy}}"/>

            </DataGrid.Columns>
        </DataGrid>
    </Grid>
    </Border>

</UserControl>